{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","error","isLoaded","character","contentFetch","bind","console","log","fetch","then","response","json","data","setState","this","quote","image","id","className","src","onClick","target","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"sPAsEeA,G,wDAhEb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,MAAM,KACNC,UAAS,EACTC,UAAU,IAEZ,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAPJ,E,2DAUF,IAAD,OACbC,QAAQC,IAAI,qBACZC,MAAM,gDACPC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACG,GACE,EAAKC,SAAS,CACbX,UAAS,EACTC,UAAUS,EAAK,U,0CAMvBE,KAAKV,iB,+BAILE,QAAQC,IAAK,YADP,MAEsCO,KAAKd,MAA1CE,EAFD,EAECA,SAAgBa,GAFjB,EAEUC,MAFV,EAEiBD,OAAOZ,EAFxB,EAEwBA,UAG9B,OAFAG,QAAQC,IAAK,YAAYJ,EAAW,QAASY,GAExCb,EAMSA,EAER,yBAAKe,GAAG,aACN,yBAAKC,UAAU,cAAcC,IAAKhB,EAAUa,QAC5C,wBAAIE,UAAU,cAAcD,GAAG,QAAQd,EAAUY,OACjD,wBAAIG,UAAU,cAAcD,GAAG,UAAU,KAAOd,EAAUA,WAC1D,yBAAKe,UAAU,OACb,wCAAQA,UAAU,UAAUD,GAAG,SAASG,QAASN,KAAKV,cAAtD,KAAuE,aAAvE,aACA,4BAAQc,UAAU,UAAUD,GAAG,YAAW,uBAAGA,GAAG,cAAcI,OAAO,SAASC,KAAM,yCAAyCnB,EAAUY,MAAQ,MAAQZ,EAAUA,WAAW,uBAAGc,GAAG,WAAWC,UAAU,yBAA7J,kBAR3C,EAJL,yBAAKD,GAAG,aACN,wBAAIC,UAAU,eAAd,mB,GApCQK,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAvC,GACLK,QAAQL,MAAMA,EAAMwC,a","file":"static/js/main.eab0632b.chunk.js","sourcesContent":["import React from 'react';\n/* import logo from './logo.svg'; */\nimport './App.css';\n\nclass App extends React.Component {\n \n  constructor(props){\n    super(props);\n    this.state = {\n      error:null,\n      isLoaded:false,\n      character:[]\n    };   \n    this.contentFetch = this.contentFetch.bind(this);\n  }\n \n   contentFetch(){\n    console.log(\"component mounted\");\n    fetch('https://thesimpsonsquoteapi.glitch.me/quotes')\n  .then(response => response.json())\n  .then((data) => { \n           this.setState({\n            isLoaded:true,\n            character:data[0]     \n            });\n      });\n  } \n  \n  componentDidMount(){\n    this.contentFetch();\n  }\n  \n  render(){\n    console.log ('rendered');\n    const {isLoaded,image, quote, character } = this.state; \n    console.log ('character',character, 'quote', quote)\n\n    if (!isLoaded){\n      return (\n        <div id=\"quote-box\">\n          <h1 className=\"text-center\">Loading...</h1>\n        </div>\n        );\n      } else if  (isLoaded){\n        return (\n          <div id=\"quote-box\">\n            <img className=\"text-center\" src={character.image}/>\n            <h1 className=\"text-center\" id=\"text\">{character.quote}</h1>\n            <h2 className=\"text-center\" id=\"author\">{\"- \" + character.character}</h2>\n            <div className=\"row\">\n              <button className=\"btnSimp\" id=\"newBtn\" onClick={this.contentFetch} id=\"new-quote\">New Quote</button>\n              <button className=\"btnSimp\" id=\"tweetBtn\"><a id=\"tweet-quote\" target=\"_blank\" href={\"https://twitter.com/intent/tweet?text=\"+character.quote + \" - \" + character.character}><i id=\"bird-ico\" className=\"fab fa-3x fa-twitter\"/> Tweet</a></button>            \n            </div>  \n          </div>    \n        )\n      } \n   }\n}\n\n\n/*\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n    </div>\n  );\n}\n*/\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n/*import Bootstrap from 'bootstrap';*/\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}